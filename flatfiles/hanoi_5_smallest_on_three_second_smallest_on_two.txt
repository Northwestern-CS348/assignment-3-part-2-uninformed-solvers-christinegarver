"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where 
disk1 (the smallest) is on peg3
disk2 (the second smallest) is on peg2, and
other disks are on peg1.

        |            |            |
        |            |            |
        |            |            |
        |            |            |
     ---|--- disk3   |            |
    ----|----        |            |
   -----|-----     --|-- disk2   -|- disk1
==========================================
       peg1         peg2         peg3
       
Example: 
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

"""
Objects & Relationships
"""

# which pegs the disks are on
fact: (on disk1 peg3)
fact: (on disk2 peg2)
fact: (on disk3 peg1)
fact: (on disk4 peg1)
fact: (on disk5 peg1)

# movable disks right now
fact: (movable disk1 peg3 peg2)
fact: (movable disk1 peg3 peg1)
fact: (movable disk2 peg2 peg1)

# tops of pegs
fact: (top disk3 peg1)
fact: (top disk2 peg2)
fact: (top disk1 peg3)

# disky is smaller than diskz
fact: (smaller disk1 disk2)
fact: (smaller disk2 disk3)
fact: (smaller disk3 disk4)
fact: (smaller disk4 disk5)

# disky is ontop of diskz
fact: (ontop disk3 disk4)
fact: (ontop disk4 disk5)



"""
Inferences
"""

#if disky is smaller than diskx and diskx is smaller than diskz -> disky is smaller than diskz
rule:((smaller ?X ?Y) (smaller ?Y ?Z)) -> (smaller ?X ?Z)

#if disk is top, its on that peg
rule: (top ?X ?Y) -> (on ?X ?Y)

#if disk is top and another peg top is bigger, disk is movable
rule: ((top ?X ?Y) (top ?Z ?V) (smaller ?X ?Z)) -> (movable ?X ?Y ?V)

#if disk is top and another peg is empty, disk is movable
rule: ((top ?X ?Y) (on none ?V)) -> (movable ?X ?Y ?V)

#disk is not movable if not top
rule: (~(top ?X ?Y) (on ?X ?Y)) -> ~(movable ?X ?Y ?Y)

#disk is not movable if on that peg
rule: (on ?X ?Y) -> ~(movable ?X ?Y ?Y)
rule: (top ?X ?Y) -> ~(movable ?X ?Y ?Y)